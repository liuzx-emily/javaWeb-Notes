
----------------【重要】----------------
乐观锁、悲观锁


mybatis缓存



排序字段用int 不能用varchar
	不然涉及到排序时，ORDER BY会"不合逻辑"地按照字符串排序


mybatis中对单引号、双引号处理不一样	
	双引号判空要用：!unit_id.equals("")
	单引号判空要用：unit_id!=''
如果要和字符串比较，必须要equals和双引号：
	可以：unit_type.equals("1")
	不可以：unit_type != '1'


mybatis中根据字段a，决定字段b
	<!-- 【单位】所属单位id（只有单位类型为1时，才查询）-->
    <if test=' unit_type!=null and unit_type.equals("1") and unit_id != null and !unit_id.equals("")'>
	 	 AND t_position.unit_id = #{unit_id}
    </if>


mysql：
	服务默认不区分大小写。
	如果想要大小写敏感，需要更改mysql的设置（这样该mysql服务下的所有数据库都会变成大小写敏感，会影响所有相关项目。）

oracle数据库：
	列名、表名等区分大小写，但是关键字(select insert..)不区分大小写。
	它会自动把关键字全转换成大写。为了省去它这一步，建议关键字都用大写。



子查询和左右连接：
	左右连接：数据量是做乘法。
	子查询：从内到外，一层一层查
所以：
	两个表的数据都很多时（千、万级），用左右连接时数据量做乘法，数据量太大，应该用子查询。
	如果从表的数据量不大（几百），那么用左右连接。



mybatis中，认为数字0和空字符串是全等的，所以 
	(1) test=" xx != null and xx != '' "	
	(2) test=" xx != null "	
如果是字符串"0"，可以用(1)
如果数据库中建表的时候选的类型是整型，则必须用(2)



模糊查询：
	(1) sname like concat('%',#{sname},'%')
	(2) instr (sname,#{sname}) > 0
		大于号不能直接写，下面两种都可以：
		instr (sname,#{sname}) &gt; 0
		instr (sname,#{sname}) <![CDATA[ > ]]> 0

	oracle和mysql中都有instr函数，都用2不用1：
		1容易被sql注入，2不容易被注入
		字段设置了索引时，2要快得多
	sqlserver中没有instr，只能用like：
		那么在java中要加入额外验证，把例如%的处理一下转成字符串



mybatis中，语句的属性有parameterType，和parameterMap，要注意自动补全容易选错



mysql的分页，只有mysql中有limit
	limit ${起始条数，不包含自己。从0开始},${共几条}
	例如: limit 10,5 是取第11到15条




------------------sql必知必会笔记------------------
看到53页了
字段拼接，不同数据库中不同：
	mysql中用concat：（在mysql中不能用+来拼接，||则会被视为or操作符）
		select concat(a,'(',b,')') from t
	sql server用+：
		select a + '(' + b + ')' from t
	oracle用||：
		select a || '(' || b || ')' from t

函数——文本处理常用函数：
	大小写：lower upper
	去掉空格：rtrim ltrim trim
		对于字符串格式的列，有的数据库会给长度不够的值进行填充（右边填充空格）。
		为了正确返回数据，必须用rtrim去掉。
			
	字符串截取：
		mysql中用substring、left、right：https://www.cnblogs.com/wjm956/p/7724244.html
			substring(str, pos) pos如果是负的，则是倒着数
			substring(str, pos, len) 
		sqlserver中用substring
		oracle中用substr

函数——取当前日期：
	要慎重考虑，是在数据库中取时间（移植难），还是在程序中取时间（麻烦）
	mysql中使用curdate()：
		select curdate() from t
	sqlserver中使用getdate()
	oracle中使用sysdate

函数——数据类型转换：
	mysql、sqlserver中用convert(value,type)
		转换的数据类型是有限制的。这个类型可以是以下值其中的一个：
			二进制，同带binary前缀的效果 : BINARY
			字符型，可带参数 : CHAR()
			日期 : DATE
			时间: TIME
			日期时间型 : DATETIME
			浮点数 : DECIMAL
			整数 : SIGNED
			无符号整数 : UNSIGNED
		select convert('2009_5_26',DATETIME)
	oracle中每种类型的转换都有响应的函数




-------------------多表查询【重点】-------------------
分类：
	操作结果集：并集union 差集except 交集intersect		
	连接查询
	子查询

1 操作结果集：
	要求：两个结果集的结构相同、列数相同、列数据类型兼容、不包含order by和compute子句
	1 并集 union [all]
		select * from ab union select * from cd;
		说明：
			union：去除重复行
			union all:不去除重复行
	2 差集 except
		select name from t1 except select name from t2;
	3 交集 intersect
		select name from t1 intersect select name from t2;
	4 排序order by
		select name from t1 intersect select name from t2 order by name desc;
		说明：
			1 对整个运算后的结果排序
		　　2 排序字段名称是第一个结果集
	详：https://www.cnblogs.com/kissdodog/archive/2013/06/24/3152743.html


2 连接查询
	内连接:（笛卡尔积，用where筛）
		连接结果仅包含符合where条件的行，参与连接的两个表都应该符合连接条件。
		【mysql方言】select * from a,b where a.id=b.id;
		【标准】select * from a INNER JOIN b ON a.id=b.id;【关键字：INNER JOIN，ON】

	外连接		
		左外连接：左边表数据行全部保留，右边表保留符合连接条件的行。
			SELECT * FROM a LEFT JOIN b ON a.id=b.id;
			用子连接来模拟：SELECT a.*,(SELECT b.* FROM b WHERE a.id = b.id) FROM a【有时候能提速】
		右外连接：右边表数据行全部保留，左边表保留符合连接条件的行。
			SELECT * FROM a RIGHT JOIN b ON a.id=b.id;
		全外连接：左外连接 union 右外连接。


总结：
	1、 查两表关联列相等的数据用内连接。
	2、 Col_L是Col_R的子集时用右外连接。
	3、 Col_L是Col_R的父集时用左外连接。
	4、 Col_R和Col_L彼此有交集但彼此互不为子集时候用全外。
	5、 求差操作的时候用联合查询。


例子：

	SELECT
		e.*, 
		d.dname,
		s.grade
	FROM
		emp e
	LEFT JOIN emp m ON m.ename = e.mgr
	LEFT JOIN dept d ON e.deptno = d.deptno
	LEFT JOIN salgrade s ON (e.sal BETWEEN s.losal AND s.hisal)
	WHERE
		e.sal > (SELECT AVG(sal) FROM emp)



-------------------子查询-------------------

	select中嵌套其他语句
	https://www.cnblogs.com/CareySon/archive/2011/07/18/2109406.html

	select *【列可以子查询】
	from table【源可以子查询】
	where id=1;【条件可以子查询】



-------------------函数-------------------
1 左列转成右列：
		null 	0%
		0.2 	20&
		1 		100%		
	用函数：concat和ifnull
		concat( ifnull(n,0) *100 ,"%")

2 日期格式化 
	date_format(date, '%Y-%m-%d') date




----------------起步----------------
数据库：mysql oracle sqlserver
数据库管理系统：navicat

mysql安装过程中，输入的root密码，必须要记住

mysql服务启动、关闭：
	1 我的电脑 → 管理 → 服务 → 可以找到MySQL服务开启或停止
	2 命令行：net start mysql
			  net stop mysql




----------------sql语法----------------
1 语句可以跨行，以分号结尾
2 常用数据结构：
	int		
	double
	varchar	可变长度的字符串
	date	日期类型，yyyy-MM-dd，没有时分秒
	_Blob	主要用来存图片和视频，知道就行





-------------------where条件-------------------
	=
	<>						不等于
	<=
	&& and
	|| or 
	! not	
	in (1,6) 				1或者6
	any(1,6)				in(1,5)等价于=any(1,6)   列>any(1,6)：列>1或列>6都行
	all(1,6)				列>all(1,6)：列>1并且列>6
	between x and y 		在x和y之间（包括xy）
	is null
	is not null
	
LIKE 通配符	模糊查询：
	% 用来匹配任意个字符，可以无字符
	_ 用来匹配一个字符




-------------------增删改-------------------
除了数值类型外，其它类型的值必须用引号

1 增inserrt
	INSERT student (id,name,age) VALUES (001,'小明',23);

2 删delete
	DELETE FROM student WHERE age=23;
	truncate table 表名;	#清空整个数据表的数据，保留表结构
	drop table 表名;		#完全删除表，这个表就不存在了

	问题：delete from 表名 和 truncate table 表名;的区别
		delete是一条一条删除，不清空auto_increment记录数。效率低
		truncate直接将表删除后重建。auto_increment将置为零

3 改update
	UPDATE student SET age=13 WHERE id=22;




-------------------查-------------------
可以给列、表起别名
	select p.name as "nickname" from t_person p where p.id="3A2";

可以直接对列进行运算
	select (age+2) as "changedAge" from t_person;

排序：order by 列名 [desc][asc]，默认asc




-------------------聚合函数-------------------
之前我们做的查询都是横向，而使用聚合函数查询是纵向查询，
它是对一列的值进行计算，然后返回一个单一的值；另外聚合函数会忽略空值null。

	count：统计指定列不为NULL的记录行数
	max min：如果指定列是字符串类型，那么使用字符串排序运算；
	sum avg：如果指定列类型不是数值类型，那么计算结果为0；

例：
	SELECT COUNT(*) FROM zhangwu;	#查询一共有多少条数据
	SELECT SUM(zname) FROM zhangwu WHERE zname LIKE'%收入%';
	SELECT MAX(zmoney) FROM zhangwu;
	SELECT AVG(zmoney) FROM zhangwu;




-------------------分组查询-------------------
分组查询:  group by 被分组的列名，必须跟随聚合函数
SELECT SUM(money),name FROM zhangwu GROUP BY name
分组操作中的having子语句，是用于在分组后对数据进行过滤的

having与where的区别
	having：分组后过滤.
	where：分组前过滤
  
-- 对name先查询，再分组求和,求和结果按照降序排列
	SELECT SUM(money)AS 'getsum',name FROM zhangwu WHERE name LIKE'%支出%' GROUP BY name ORDER BY getsum DESC

-- 对name先查询，再分组求和。分组求和的结果按照>5000筛选
	SELECT SUM(money)AS 'getsum',name FROM zhangwu WHERE name LIKE'%支出%'GROUP BY name HAVING getsum>5000





-------------------例子-------------------
1 从student表中查询年龄在25-30之间的（只有birth）
	SELECT name,2017-birth as age,department from student HAVING age BETWEEN 25 AND 30;
	SELECT name,2017-birth as age,department from student WHERE 2017-birth BETWEEN 25 AND 30;

2 从student表中查询每个院系有多少人 
	select COUNT(*),department FROM student GROUP BY department;

4 查询李四的考试科目（c_name）和考试成绩（grade）
	select c_name,grade from score where stu_id=(select id from student where name='李四');

5 用连接的方式查询所有学生的信息和考试信息
	select * from score,student where student.id=score.stu_id;【方言】
	select * from score INNER JOIN student ON student.id=score.stu_id;【标准】

6 同时参加计算机和英语考试的学生
	select stu_id from score where stu_id in (select stu_id from score where c_name='计算机') and c_name='英语';
	思路：先找到所有参加了计算机的，在找同时参加了英语的

7 查询2000年入职的员工
	... WHERE hiredate LIKE '2000%'

8 用年龄降序排序。如果年龄相同，用学号升序排列
	... ORDER BY age DESC,id ASC








-------------------JDBC原理-------------------
JDBC：Java Data Base Connectivity

Java提供的"访问数据库规范"称为"JDBC"，是"规范"。
每个数据库的生产厂商，提供"规范的实现类"，称为"驱动"。
	
所以一定要额外下载、导入驱动的jar包。





-------------------mysql&预编译？-------------------
http://cs-css.iteye.com/blog/1847772

mysql开启预编译 <==> 在连接数据库时，url后面的加上参数useServerPstmts=true

mysql在默认情况下是否开启预编译，与MySQL服务器的版本无关，而与mysql驱动程序的版本有关。
以5.0.5版本驱动为分界：
	<的默认开启(默认useServerPstmts=true)
	>=的默认不开启(默认useServerPstmts=false)

结论：对于mysql驱动5.0.5以上的版本，若使用useServerPrepStmts=true开启预编译，则一定要同时使用cachePrepStmts=true 开启预编译缓存，否则性能会下降，若二者都开启，性能并没有显著的提高，这个可能是我测试程序的原因，有待进一步研究。





-------------------编码问题-------------------
查询数据库的编码：
	SHOW VARIABLES LIKE 'char%';

	character_set_client：mysql接数据用这个编码
	character_set_results：mysql发送数据用这个编码




------------使用Properties配置文件------------
开发中，连接数据库的4个参数（驱动、URL、用户名、密码），通常都存在配置文件中，方便后期修改。
通常情况下，我们习惯使用properties文件，此文件我们将做如下要求：
	1.文件位置：任意，建议src下
	2.文件名称：任意，扩展名为properties
	3.文件内容：一行一组数据，格式是“key=value”.
		a)key命名自定义，如果是多个单词，习惯使用点分隔。例如：jdbc.driver
		b)value值不支持中文，如果需要使用非英文字符，将进行unicode转换。





----------下面的：随便看看有印象就行，不用记。用的时候再查--------------

	----------------数据库操作----------------
	1 创建	
		create database liuzx;
		create database liuzx character set utf8;
	2 查看
		show databases;	#查看所有
		show create database liuzx;	#查看特定
	3 删除
		drop database liuzx;
	4 切换数据库：
		use liuzx;
	5 查看正在使用的数据库:
		select database();

	----------------表操作----------------
	1 创建
		CREATE TABLE student(
			id VARCHAR(100),
			name VARCHAR(20) NOT NULL,
			age INT,
			PRIMARY key(id)	#主键
		);
	2 删除
		DROP TABLE student;
	3 查看
		show tables;	#查看所有
		desc student;	#查看特定
	4 删除
		drop table student;

	----------------修改表结构----------------
	1 添加列
		alter table 表名 add 列名 类型(长度) 约束;
		ALTER TABLE student ADD col1 VARCHAR(20);
	2 修改列的类型、长度、约束.
		alter table 表名 modify 列名 类型(长度) 约束; 
		ALTER TABLE student MODIFY col1 VARCHAR(50) NOT NULL;
	3 修改列名
		alter table 表名 change 旧列名 新列名 类型(长度) 约束; 
		ALTER TABLE student CHANGE col1 col2 VARCHAR(30);
	4 删除列
		alter table 表名 drop 列名;	
		ALTER TABLE student DROP col2;
	5 修改表名
		rename table 表名 to 新表名; 
		RENAME TABLE student TO newstudent;
	6 修改表的字符集
		alter table 表名 character set 字符集;
		ALTER TABLE newstudent CHARACTER SET gbk;

	-------------------JDBC开发步骤：-------------------
	（1）执行insert delete update：用executeUpdate
		// 0.导入mysql的jar包

		// 1.注册驱动
		// 		所有的driver实现都提供了static块，块内的代码就是把自己注册到DriverManager中！
		Class.forName("com.mysql.jdbc.Driver");

		// 2.连接数据库
		String url = "jdbc:mysql://localhost:3306/liuzx";
		String username = "root";
		String password = "123456";
		Connection con = DriverManager.getConnection(url, username, password);

		// 3.执行sql语句
		String sql = "INSERT INTO student(id,name,age) VALUES(?,?,?)";
		PreparedStatement ps = con.prepareStatement(sql);
		ps.setInt(1, 1);
		ps.setString(2, "Alice");
		ps.setInt(3, 14);
		ps.executeUpdate();

		// 4.处理结果

		// 5.释放资源
		ps.close();
		con.close();

	（2）执行select：用executeQuery

		// 3.执行sql语句
		String sql = "select * from student where id=?";
		PreparedStatement ps = con.prepareStatement(sql);
		ps.setInt(1, 2);
		ResultSet rs = ps.executeQuery();
		
		// 4.处理结果
		while(rs.next()){
			System.out.println(rs.getString("name"));
		}	
			
		// 5.释放资源
		rs.close();
		ps.close();
		con.close();


	预处理对象prepareStatement：高效+防SQL注入攻击
	SQL注入攻击：
		假设登录的sql语句如下:
			select * from user where name = 用户输入的用户名 and password = 用户输的密码;
		当用户输入的密码为：xxx or 1=1 时，则真正执行的代码变为：
			select * from 用户表 where name = 'xxx' and password ='xxx' or 1=1;
		上述语句永远可以查询出结果，那么用户就直接登录成功了。

	预处理的原理：
		1 sql服务器的工作：
			> 校验sql语句的语法
			> 编译
			> 执行
		2 预处理
			> 前提：数据库必须支持预处理（几乎都支持）
			> 每个ps都与一个sql模版绑定在一起。先把sql模版给数据库，数据库进行校验语法、编译。执行的时候只是传递参数
			> 若二次执行，不用再次校验语法、编译。直接传递参数执行

