--------------------------------
	小tip
1 强转String：
	(String)
	.toString()：可以把时间戳转成时间

2 判断String是否相同，不能用==，用S1.equals(S2)

3 Object是顶级父类

4 js中的[{},{}]  <-->  java中的 List<Map<String,Object>>

5 myEclipse：
	快捷键：
		代码补全 	Content Assist 	alt+w（改）
		getter		alt+shit+s打开source，选getter
		快速导包	ctrl+shift+o
		
	WEB-INF > lib中的所有jar包，右键 > build path > add to ..

--------------------------------
三层：
	view
	service：业务逻辑层
		serviceImpl
	mapper:数据库操作
		mapperImpl


--------------------------------
包的作用：
	① 用于区分重命名
	② 用于控制访问权限
	③ 用于划分项目的结构层次，通常将功能相近的类划分到同一个包中。
package : 用于确定当前类的位置
    ① 使用在当前 .java 源文件可执行代码的首行
    ② 包的命名规范：所有字母都小写。
        如：  com.atguigu.项目名.模块名;
    ③ 每个“.”代表一层目录
import :　用于确定需要引入那个类的位置
    ① 使用在 package 和  class 之间
    ② 可以有多条，并排列出
    ③ import com.atguigu.aaa.* : 


jar包：包含很多类class，压缩过的



--------------------------------
数据类型：
	1）基本数据类型：byte、short、int、long、float、double、char、boolean 
	2）引用数据类型: 数组、类、接口。

在 java程序中所有的数据都需要当做对象来处理，针对8种基本数据类型提供了包装类，如下：
	int --> Integer
	byte --> Byte
	short --> Short
	long --> Long
	char --> Character
	double --> Double
	float --> Float
	boolean --> Boolean
包装类是对象，可以是null，可以有属性和方法



--------------------------------
java三大特征：继承 + 封装 + 多态

继承：OOP最显著的特性。好处：
	1：提高了代码的复用性。
	2：让类与类之间产生了关系，提供了另一个特征多态的前提。

封装：隐藏内部实现(private)，对外提供借口

多态：OOP特征之一，函数本身就具备多态性，某一种事物有不同的具体的体现。 
	体现：父类引用或者接口的引用指向了自己的子类对象。//Animal a = new Cat();
	好处：提高了程序的扩展性。
	弊端：当父类引用指向子类对象时，虽然提高了扩展性，但是只能访问父类中具备的方法，不可以访问子类中特有的方法。(前期不能使用后期产生的功能，即访问的局限性)
	前提：
	    1：必须要有关系，比如继承、或者实现。
	    2：通常会有覆盖操作。

接口：接口就是一些方法特征的集合



--------------------------------

当函数没有具体的返回值时，返回的返回值类型用void关键字表示。
如果函数的返回值类型是void时，return语句可以省略不写的，系统会帮你自动加上。
return的作用：结束函数。结束功能。

主函数：
    1）、程序的入口。
    2）、保证该类的独立运行。


--------------------------------
数组：用于存储同一类型数据的一个容器。好处：可以对该容器中的数据进行编号，从0开始。数组用于封装数据，就是一个具体的实体。
如何在java中表现一个数组呢？两种表现形式。
	1） 元素类型[] 变量名 = new 元素类型[元素的个数]；
	2） 元素类型[] 变量名 = {元素1，元素2...}；
		元素类型[] 变量名 = new 元素类型[]{元素1，元素2...}；

集合框架：★★★★★，用于存储数据的容器。
特点：
1：对象封装数据，对象多了也需要存储。集合用于存储对象。
2：对象的个数确定可以使用数组，但是不确定怎么办？可以用集合。因为集合是可变长度的。
 
集合和数组的区别：
1：数组是固定长度的；集合可变长度的。
2：数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。
3：数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。


Iteraotr
	|--Collection：	
		|--Set：无序，不可重复。
	    |--List：有序，可重复
		    |--ArrayList：底层的数据结构是数组,线程不同步，ArrayList替代了Vector，查询元素的速度非常快。
	|--Map：
		|--HashMap：底层是哈希表数据结构，是线程不同步的。可以存储null键，null值。替代了Hashtable.

list.add(Object)
list.get(index)

map.put(key, value)
map.get(key)



--------------------------------
static：★★★ 关键字，是一个修饰符，用于修饰成员(成员变量和成员函数)。
特点：
	1，想要实现对象中的共性数据的对象共享。可以将这个数据进行静态修饰。
	2，被静态修饰的成员，可以直接被类名所调用。也就是说，静态的成员多了一种调用方式。类名.静态方式。
	3，静态随着类的加载而加载。而且优先于对象存在。



--------------------------------
异 常：★★★★
异常：就是不正常。程序在运行时出现的不正常情况。

常见异常：
	1 脚标越界异常（IndexOutOfBoundsException）包括数组、字符串；
	2 空指针异常（NullPointerException）
	3 类型转换异常 ClassCastException